{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","history","squares","Array","fill","stepNumber","i","this","slice","length","xIsNext","setState","concat","current","className","onClick","handleClick","React","Component","Square","selectionStarted","startRow","startColumn","endRow","endColumn","addMode","componentDidMount","window","addEventListener","handleTouchEndWindow","componentWillUnmount","removeEventListener","render","renderRows","Children","map","children","tr","key","cell","j","onTouchStart","handleTouchStartCell","onTouchMove","handleTouchMoveCell","selected","value","beingSelected","isCellBeingSelected","e","isLeftClick","button","isTouch","type","preventDefault","eventToCellLocation","row","column","onSelectionStart","nextRowCount","Math","abs","nextColumnCount","maxRows","maxColumns","clone","minRow","min","maxRow","max","minColumn","maxColumn","onChange","defaultProps","Infinity","onInput","Cell","shouldComponentUpdate","nextProps","td","handleTouchStart","passive","handleTouchMove","disabled","ref","onMouseDown","onMouseMove","target","touches","touch","document","elementFromPoint","clientX","clientY","tagName","parentNode","rowIndex","cellIndex","Board","renderSquare","cells","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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A,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,oCAEF,4BACE,gCAAM,EAAKA,eAAX,KACA,mCACA,gCAAM,EAAKA,eAAX,KACA,mCACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,MAEF,4BACE,mCACA,mCACA,gCAAM,EAAKA,eAAX,KACA,mCACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,mCACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,MAEF,4BACE,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,mCACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,mCACA,gCAAM,EAAKA,eAAX,KACA,mCACA,oCAEF,4BACE,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,mCACA,gCAAM,EAAKA,eAAX,KACA,mCACA,gCAAM,EAAKA,eAAX,MAEF,4BACE,mCACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,MAEF,4BACE,mCACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,mCACA,gCAAM,EAAKA,eAAX,KACA,mCACA,mCACA,mCACA,gCAAM,EAAKA,eAAX,MAEF,4BACE,mCACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,mCACA,mCACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,KACA,gCAAM,EAAKA,eAAX,QA/IN,EAAKnG,MAAQ,CACXoG,MAAO,CACL,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GACpC,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GACpC,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GACpC,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GACpC,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GACpC,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,GACpC,EAAC,GAAO,GAAO,GAAO,GAAO,GAAO,KAVvB,E,0EAeN9F,GACX,OACE,kBAACa,EAAD,U,GAlBcF,IAAMC,WAuJXpB,IC3eKuG,QACW,cAA7B1E,OAAO2E,SAASC,UAEe,UAA7B5E,OAAO2E,SAASC,UAEhB5E,OAAO2E,SAASC,SAASC,MACvB,2DCZNC,IAASzE,OAAO,kBAAC,EAAD,MAAS0D,SAASgB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.3cf4fe72.chunk.js","sourcesContent":["import React from 'react';\r\nimport clone from \"clone\";\r\nimport PropTypes from \"prop-types\";\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      history: [\r\n        {\r\n          squares: Array(9).fill(null)\r\n        }\r\n      ],\r\n      stepNumber: 0,\r\n    };\r\n  }\r\n\r\n  handleClick(i) {\r\n    const history = this.state.history.slice(0, this.state.stepNumber + 1);\r\n    const current = history[history.length - 1];\r\n    const squares = current.squares.slice();\r\n    squares[i] = this.state.xIsNext ? \"X\" : \"O\";\r\n    this.setState({\r\n      history: history.concat([\r\n        {\r\n          squares: squares\r\n        }\r\n      ]),\r\n      stepNumber: history.length,\r\n      xIsNext: !this.state.xIsNext\r\n    });\r\n  }\r\n\r\n  render() {\r\n    const history = this.state.history;\r\n    const current = history[this.state.stepNumber];\r\n\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board\r\n            squares={current.squares}\r\n            onClick={i => this.handleClick(i)}\r\n          />\r\n        </div>\r\n        <div className=\"game-controls\">\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nfunction Square(props) {\r\n  return (\r\n    <input className=\"square\">\r\n    </input>\r\n  );\r\n}\r\n\r\nclass TableDragSelect extends React.Component {\r\n  static propTypes = {\r\n    value: props => {\r\n      const error = new Error(\r\n        \"Invalid prop `value` supplied to `TableDragSelect`. Validation failed.\"\r\n      );\r\n      if (!Array.isArray(props.value)) {\r\n        return error;\r\n      }\r\n      if (props.value.length === 0) {\r\n        return;\r\n      }\r\n      const columnCount = props.value[0].length;\r\n      for (const row of props.value) {\r\n        if (!Array.isArray(row) || row.length !== columnCount) {\r\n          return error;\r\n        }\r\n        for (const cell of row) {\r\n          if (typeof cell !== \"boolean\") {\r\n            return error;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    maxRows: PropTypes.number,\r\n    maxColumns: PropTypes.number,\r\n    onSelectionStart: PropTypes.func,\r\n    onInput: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n    children: props => {\r\n      if (TableDragSelect.propTypes.value(props)) {\r\n        return; // Let error be handled elsewhere\r\n      }\r\n      const error = new Error(\r\n        \"Invalid prop `children` supplied to `TableDragSelect`. Validation failed.\"\r\n      );\r\n      const trs = React.Children.toArray(props.children);\r\n      const rowCount = props.value.length;\r\n      const columnCount = props.value.length === 0 ? 0 : props.value[0].length;\r\n      if (trs.length !== rowCount) {\r\n        return error;\r\n      }\r\n      for (const tr of trs) {\r\n        const tds = React.Children.toArray(tr.props.children);\r\n        if (tr.type !== \"tr\" || tds.length !== columnCount) {\r\n          return error;\r\n        }\r\n        for (const td of tds) {\r\n          if (td.type !== \"td\") {\r\n            return error;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  static defaultProps = {\r\n    value: [],\r\n    maxRows: Infinity,\r\n    maxColumns: Infinity,\r\n    onSelectionStart: () => {},\r\n    onInput: () => {},\r\n    onChange: () => {}\r\n  };\r\n\r\n  state = {\r\n    selectionStarted: false,\r\n    startRow: null,\r\n    startColumn: null,\r\n    endRow: null,\r\n    endColumn: null,\r\n    addMode: null\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    window.addEventListener(\"mouseup\", this.handleTouchEndWindow);\r\n    window.addEventListener(\"touchend\", this.handleTouchEndWindow);\r\n  };\r\n\r\n  componentWillUnmount = () => {\r\n    window.removeEventListener(\"mouseup\", this.handleTouchEndWindow);\r\n    window.removeEventListener(\"touchend\", this.handleTouchEndWindow);\r\n  };\r\n\r\n  render = () => {\r\n    return (\r\n      <table className=\"table-drag-select\">\r\n        <tbody>{this.renderRows()}</tbody>\r\n      </table>\r\n    );\r\n  };\r\n\r\n  renderRows = () =>\r\n    React.Children.map(this.props.children, (tr, i) => {\r\n      return (\r\n        <tr key={i} {...tr.props}>\r\n          {React.Children.map(tr.props.children, (cell, j) => (\r\n            <Cell\r\n              key={j}\r\n              onTouchStart={this.handleTouchStartCell}\r\n              onTouchMove={this.handleTouchMoveCell}\r\n              selected={this.props.value[i][j]}\r\n              beingSelected={this.isCellBeingSelected(i, j)}\r\n              {...cell.props}\r\n            >\r\n              {cell.props.children}\r\n            </Cell>\r\n          ))}\r\n        </tr>\r\n      );\r\n    });\r\n\r\n  handleTouchStartCell = e => {\r\n    const isLeftClick = e.button === 0;\r\n    const isTouch = e.type !== \"mousedown\";\r\n    if (!this.state.selectionStarted && (isLeftClick || isTouch)) {\r\n      e.preventDefault();\r\n      const { row, column } = eventToCellLocation(e);\r\n      this.props.onSelectionStart({ row, column });\r\n      this.setState({\r\n        selectionStarted: true,\r\n        startRow: row,\r\n        startColumn: column,\r\n        endRow: row,\r\n        endColumn: column,\r\n        addMode: !this.props.value[row][column]\r\n      });\r\n    }\r\n  };\r\n\r\n  handleTouchMoveCell = e => {\r\n    if (this.state.selectionStarted) {\r\n      e.preventDefault();\r\n      const { row, column } = eventToCellLocation(e);\r\n      const { startRow, startColumn, endRow, endColumn } = this.state;\r\n\r\n      if (endRow !== row || endColumn !== column) {\r\n        const nextRowCount =\r\n          startRow === null && endRow === null\r\n            ? 0\r\n            : Math.abs(row - startRow) + 1;\r\n        const nextColumnCount =\r\n          startColumn === null && endColumn === null\r\n            ? 0\r\n            : Math.abs(column - startColumn) + 1;\r\n\r\n        if (nextRowCount <= this.props.maxRows) {\r\n          this.setState({ endRow: row });\r\n        }\r\n\r\n        if (nextColumnCount <= this.props.maxColumns) {\r\n          this.setState({ endColumn: column });\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  handleTouchEndWindow = e => {\r\n    const isLeftClick = e.button === 0;\r\n    const isTouch = e.type !== \"mousedown\";\r\n    if (this.state.selectionStarted && (isLeftClick || isTouch)) {\r\n      const value = clone(this.props.value);\r\n      const minRow = Math.min(this.state.startRow, this.state.endRow);\r\n      const maxRow = Math.max(this.state.startRow, this.state.endRow);\r\n      for (let row = minRow; row <= maxRow; row++) {\r\n        const minColumn = Math.min(\r\n          this.state.startColumn,\r\n          this.state.endColumn\r\n        );\r\n        const maxColumn = Math.max(\r\n          this.state.startColumn,\r\n          this.state.endColumn\r\n        );\r\n        for (let column = minColumn; column <= maxColumn; column++) {\r\n          value[row][column] = this.state.addMode;\r\n        }\r\n      }\r\n      this.setState({ selectionStarted: false });\r\n      this.props.onChange(value);\r\n    }\r\n  };\r\n\r\n  isCellBeingSelected = (row, column) => {\r\n    const minRow = Math.min(this.state.startRow, this.state.endRow);\r\n    const maxRow = Math.max(this.state.startRow, this.state.endRow);\r\n    const minColumn = Math.min(this.state.startColumn, this.state.endColumn);\r\n    const maxColumn = Math.max(this.state.startColumn, this.state.endColumn);\r\n\r\n    return (\r\n      this.state.selectionStarted &&\r\n      (row >= minRow &&\r\n        row <= maxRow &&\r\n        column >= minColumn &&\r\n        column <= maxColumn)\r\n    );\r\n  };\r\n}\r\n\r\nclass Cell extends React.Component {\r\n  // This optimization gave a 10% performance boost while drag-selecting\r\n  // cells\r\n  shouldComponentUpdate = nextProps =>\r\n    this.props.beingSelected !== nextProps.beingSelected ||\r\n    this.props.selected !== nextProps.selected;\r\n\r\n  componentDidMount = () => {\r\n    // We need to call addEventListener ourselves so that we can pass\r\n    // {passive: false}\r\n    this.td.addEventListener(\"touchstart\", this.handleTouchStart, {\r\n      passive: false\r\n    });\r\n    this.td.addEventListener(\"touchmove\", this.handleTouchMove, {\r\n      passive: false\r\n    });\r\n  };\r\n\r\n  componentWillUnmount = () => {\r\n    this.td.removeEventListener(\"touchstart\", this.handleTouchStart);\r\n    this.td.removeEventListener(\"touchmove\", this.handleTouchMove);\r\n  };\r\n\r\n  render = () => {\r\n    let {\r\n      className = \"\",\r\n      disabled,\r\n      beingSelected,\r\n      selected,\r\n      onTouchStart,\r\n      onTouchMove,\r\n      ...props\r\n    } = this.props;\r\n    if (disabled) {\r\n      className += \" cell-disabled\";\r\n    } else {\r\n      className += \" cell-enabled\";\r\n      if (selected) {\r\n        className += \" cell-selected\";\r\n      }\r\n      if (beingSelected) {\r\n        className += \" cell-being-selected\";\r\n      }\r\n    }\r\n    return (\r\n      <td\r\n        ref={td => (this.td = td)}\r\n        className={className}\r\n        onMouseDown={this.handleTouchStart}\r\n        onMouseMove={this.handleTouchMove}\r\n        {...props}\r\n      >\r\n        {this.props.children || <span>&nbsp;</span>}\r\n      </td>\r\n    );\r\n  };\r\n\r\n  handleTouchStart = e => {\r\n    if (!this.props.disabled) {\r\n      this.props.onTouchStart(e);\r\n    }\r\n  };\r\n\r\n  handleTouchMove = e => {\r\n    if (!this.props.disabled) {\r\n      this.props.onTouchMove(e);\r\n    }\r\n  };\r\n}\r\n\r\n// Takes a mouse or touch event and returns the corresponding row and cell.\r\n// Example:\r\n// eventToCellLocation(event);\r\n// returns {row: 2, column: 3}\r\nconst eventToCellLocation = e => {\r\n  let target;\r\n  // For touchmove and touchend events, e.target and e.touches[n].target are\r\n  // wrong, so we have to rely on elementFromPoint(). For mouse clicks, we have\r\n  // to use e.target.\r\n  if (e.touches) {\r\n    const touch = e.touches[0];\r\n    target = document.elementFromPoint(touch.clientX, touch.clientY);\r\n  } else {\r\n    target = e.target;\r\n    while (target.tagName !== \"TD\") {\r\n      target = target.parentNode;\r\n    }\r\n  }\r\n  return {\r\n    row: target.parentNode.rowIndex,\r\n    column: target.cellIndex\r\n  };\r\n};\r\n\r\nclass Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      cells: [\r\n        [false, false, false, false, false, false],\r\n        [false, false, false, false, false, false],\r\n        [false, false, false, false, false, false],\r\n        [false, false, false, false, false, false],\r\n        [false, false, false, false, false, false],\r\n        [false, false, false, false, false, false],\r\n        [false, false, false, false, false, false]\r\n      ]\r\n    };\r\n  }\r\n\r\n  renderSquare(i) {\r\n    return (\r\n      <Square/>\r\n    );\r\n  }\r\n\r\n    render = () =>\r\n      // <TableDragSelect\r\n      //   value={this.state.cells}\r\n      //   onChange={cells => this.setState({ cells })}\r\n      // >\r\n      <table>\r\n        <tr>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> o </td>\r\n          <td> 3 </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> 3 </td>\r\n        </tr>\r\n        <tr>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> o </td>\r\n          <td> 3 </td>\r\n          <td> o </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> 2 </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> o </td>\r\n        </tr>\r\n        <tr>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> 5 </td>\r\n        </tr>\r\n        <tr>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> 5 </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> 2 </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n        </tr>\r\n        <tr>\r\n          <td> 5 </td>\r\n          <td> o </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> o </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> o </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n        </tr>\r\n        <tr>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> 3 </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> 3 </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> 3 </td>\r\n          <td> o </td>\r\n        </tr>\r\n        <tr>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> o </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> o </td>\r\n          <td> {this.renderSquare()} </td>\r\n        </tr>\r\n        <tr>\r\n          <td> o </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n        </tr>\r\n        <tr>\r\n          <td> 7 </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> o </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> 7 </td>\r\n          <td> o </td>\r\n          <td> 3 </td>\r\n          <td> {this.renderSquare()} </td>\r\n        </tr>\r\n        <tr>\r\n          <td> o </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> o </td>\r\n          <td> 4 </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n          <td> {this.renderSquare()} </td>\r\n        </tr>\r\n      </table>\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}