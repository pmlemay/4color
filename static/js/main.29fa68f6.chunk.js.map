{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","state","inputMode","className","this","selected","onClick","setState","React","Component","InputMode","render","children","TableDragSelect","componentDidMount","window","addEventListener","handleTouchEndWindow","handleKeyPressWindow","componentWillUnmount","removeEventListener","renderRows","Children","map","tr","i","key","cell","j","onTouchStart","handleTouchStartCell","onTouchMove","handleTouchMoveCell","fixedValue","value","data","centerNote","cornerNote","color","beingSelected","isCellBeingSelected","e","isLeftClick","button","isTouch","type","selectionStarted","eventIsInputButton","resetSelection","preventDefault","eventToCellLocation","row","column","onSelectionStart","prevState","selection","some","clone","forEach","element","onChange","console","log","shouldDelete","keyCode","isNumpadNumber","code","indexOf","isNumber","valueToInsert","substring","String","fromCharCode","shouldUpdateData","shiftKey","ctrlKey","shouldAppend","length","defaultProps","maxRows","Infinity","maxColumns","onInput","Cell","shouldComponentUpdate","nextProps","td","handleTouchStart","passive","handleTouchMove","cellValue","disabled","trim","ref","onMouseDown","onMouseMove","target","touches","touch","document","elementFromPoint","clientX","clientY","tagName","parentNode","rowIndex","cellIndex","Board","cells","grid","Array","fill","Boolean","location","hostname","match","ReactDOM","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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CA,iCACA,kCACA,kCACA,kCAEA,4BACA,iCACA,iCACA,iCACA,mCACA,mCACA,iCACA,iCACA,iCACA,iCACA,kCAEA,4BACA,kCACA,iCACA,iCACA,iCACA,iCACA,iCACA,kCACA,kCACA,iCACA,kCAEA,4BACA,iCACA,iCACA,kCACA,kCACA,iCACA,iCACA,iCACA,iCACA,iCACA,mCAEA,4BACA,iCACA,iCACA,iCACA,iCACA,iCACA,kCACA,kCACA,iCACA,iCACA,kCAEA,4BACA,iCACA,kCACA,kCACA,iCACA,iCACA,kCACA,iCACA,iCACA,kCACA,mCAEA,4BACA,iCACA,iCACA,iCACA,iCACA,kCACA,kCACA,iCACA,iCACA,iCACA,kCAEA,4BACA,kCACA,kCACA,iCACA,iCACA,iCACA,iCACA,iCACA,kCACA,kCACA,oCA3IJ,IACIC,EAAO,IAAIC,MADA,IACgBC,KAAM,MAAOxF,KAAI,kBAAM,IAAIuF,MAD3C,IAC2DC,KAAK,MAAMxF,KAAI,iBACvF,CACElB,UAAU,EACV6B,MAAO,KACPG,WAAY,KACZD,WAAY,KACZH,WAAY,YATC,OAYjB,EAAKhC,MAAQ,CACX2G,MAAOC,GAbQ,E,2BADDrG,IAAMC,WAmJXV,IChjBKiH,QACW,cAA7BjG,OAAOkG,SAASC,UAEe,UAA7BnG,OAAOkG,SAASC,UAEhBnG,OAAOkG,SAASC,SAASC,MACvB,2DCZNC,IAASzG,OAAO,kBAAC,EAAD,MAASwF,SAASkB,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.29fa68f6.chunk.js","sourcesContent":["import React from 'react';\r\nimport clone from \"clone\";\r\nimport PropTypes from \"prop-types\";\r\nimport './App.css';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      inputMode: 1\r\n    };\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"game\">\r\n        <div className=\"game-board\">\r\n          <Board \r\n            inputMode={this.state.inputMode}\r\n          />\r\n        </div>\r\n        <div className=\"game-controls\">\r\n          <div className='input-mode'>\r\n            <InputMode \r\n              selected={this.state.inputMode === 1}\r\n              onClick={() => this.setState({ inputMode: 1 })}\r\n              >\r\n              Normal\r\n            </InputMode>\r\n            <InputMode \r\n              selected={this.state.inputMode === 2}\r\n              onClick={() => this.setState({ inputMode: 2 })}\r\n              >\r\n              Color\r\n            </InputMode>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nclass InputMode extends React.Component {\r\n  render = () => {\r\n    let {\r\n      className = \"input-mode-button\",\r\n      selected,\r\n      onClick,\r\n      ...props\r\n    } = this.props;\r\n    if(selected) {\r\n      className += \" selected\";\r\n    }\r\n    return (\r\n      <button \r\n        className={className}\r\n        onClick={onClick}> \r\n        {this.props.children}\r\n      </button>\r\n    );\r\n  };\r\n}\r\n\r\nclass TableDragSelect extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      selectionStarted: false,\r\n      shouldAppend: false,\r\n      selection: []\r\n    };\r\n  }\r\n\r\n  static propTypes = {\r\n    data: props => {\r\n      const error = new Error(\r\n        \"Invalid prop `data` supplied to `TableDragSelect`. Validation failed.\"\r\n      );\r\n      if (!Array.isArray(props.data)) {\r\n        return error;\r\n      }\r\n      if (props.data.length === 0) {\r\n        return;\r\n      }\r\n      const columnCount = props.data[0].length;\r\n      for (const row of props.data) {\r\n        if (!Array.isArray(row) || row.length !== columnCount) {\r\n          return error;\r\n        }\r\n        for (const cell of row) {\r\n          if (typeof cell.selected !== \"boolean\") {\r\n            return error;\r\n          }\r\n        }\r\n      }\r\n    },\r\n    maxRows: PropTypes.number,\r\n    maxColumns: PropTypes.number,\r\n    onSelectionStart: PropTypes.func,\r\n    onInput: PropTypes.func,\r\n    onChange: PropTypes.func,\r\n    children: props => {\r\n      if (TableDragSelect.propTypes.data(props)) {\r\n        return; // Let error be handled elsewhere\r\n      }\r\n      const error = new Error(\r\n        \"Invalid prop `children` supplied to `TableDragSelect`. Validation failed.\"\r\n      );\r\n      const trs = React.Children.toArray(props.children);\r\n      const rowCount = props.data.length;\r\n      const columnCount = props.data.length === 0 ? 0 : props.data[0].length;\r\n      if (trs.length !== rowCount) {\r\n        return error;\r\n      }\r\n      for (const tr of trs) {\r\n        const tds = React.Children.toArray(tr.props.children);\r\n        if (tr.type !== \"tr\" || tds.length !== columnCount) {\r\n          return error;\r\n        }\r\n        for (const td of tds) {\r\n          if (td.type !== \"td\") {\r\n            return error;\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  static defaultProps = {\r\n    data: {},\r\n    maxRows: Infinity,\r\n    maxColumns: Infinity,\r\n    onSelectionStart: () => {},\r\n    onInput: () => {},\r\n    onChange: () => {}\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    window.addEventListener(\"mouseup\", this.handleTouchEndWindow);\r\n    window.addEventListener(\"touchend\", this.handleTouchEndWindow);\r\n    window.addEventListener(\"keydown\", this.handleKeyPressWindow);\r\n  };\r\n\r\n  componentWillUnmount = () => {\r\n    window.removeEventListener(\"mouseup\", this.handleTouchEndWindow);\r\n    window.removeEventListener(\"touchend\", this.handleTouchEndWindow);\r\n    window.removeEventListener(\"keydown\", this.handleKeyPressWindow);\r\n  };\r\n\r\n  render = () => {\r\n    return (\r\n      <table className=\"table-drag-select\">\r\n        <tbody>{this.renderRows()}</tbody>\r\n      </table>\r\n    );\r\n  };\r\n\r\n  renderRows = () =>\r\n    React.Children.map(this.props.children, (tr, i) => {\r\n      return (\r\n        <tr key={i} {...tr.props}>\r\n          {React.Children.map(tr.props.children, (cell, j) => (\r\n            <Cell\r\n              key={j}\r\n              onTouchStart={this.handleTouchStartCell}\r\n              onTouchMove={this.handleTouchMoveCell}\r\n              fixedValue={cell.props.children}\r\n              value={this.props.data[i][j].value}\r\n              centerNote={this.props.data[i][j].centerNote}\r\n              cornerNote={this.props.data[i][j].cornerNote}\r\n              color={this.props.data[i][j].color}\r\n              selected={this.props.data[i][j].selected}\r\n              beingSelected={this.isCellBeingSelected(i, j)}\r\n              {...cell.props}\r\n            >\r\n              {cell.props.children}\r\n            </Cell>\r\n          ))}\r\n        </tr>\r\n      );\r\n    });\r\n\r\n  resetSelection() {\r\n    const data = clone(this.props.data);\r\n    for(let i = 0; i < data.length; i++)\r\n    {\r\n      for(let j = 0; j < data[i].length; j++)\r\n      {\r\n        data[i][j].selected = false;\r\n      }\r\n    }\r\n    this.setState({ selection: null, selectionStarted: false });\r\n    this.props.onChange(data); \r\n  }\r\n\r\n  handleTouchStartCell = e => {\r\n    const isLeftClick = e.button === 0;\r\n    const isTouch = e.type !== \"mousedown\";\r\n    if (!this.state.selectionStarted && (isLeftClick || isTouch)) {\r\n      if(!eventIsInputButton(e)){\r\n        this.resetSelection();\r\n      }\r\n      e.preventDefault();\r\n      const { row, column } = eventToCellLocation(e);\r\n      this.props.onSelectionStart({ row, column });\r\n      this.setState(prevState => ({\r\n        selectionStarted: true,\r\n        selection: [{ row, column }]\r\n      }));\r\n    }\r\n  };\r\n\r\n  handleTouchMoveCell = e => {\r\n    if (this.state.selectionStarted) {\r\n      e.preventDefault();\r\n      const { row, column } = eventToCellLocation(e);\r\n      // Do nothing if we already added that cell to the selection\r\n      if(this.state.selection.some(e => e.row === row && e.column === column)) return;\r\n\r\n      this.setState(prevState => ({\r\n        selection: [...prevState.selection, { row, column }]\r\n      }));\r\n    }\r\n  };\r\n\r\n  handleTouchEndWindow = e => {\r\n    const isLeftClick = e.button === 0;\r\n    const isTouch = e.type !== \"mousedown\";\r\n    if (this.state.selectionStarted && (isLeftClick || isTouch)) {\r\n      const data = clone(this.props.data);\r\n      this.state.selection.forEach(element => {\r\n        data[element.row][element.column].selected = true;\r\n      });\r\n      this.setState({ selectionStarted: false });\r\n      this.props.onChange(data);\r\n    }\r\n    else{\r\n      if(!eventIsInputButton(e)){\r\n        this.resetSelection();\r\n      }\r\n    }\r\n  };\r\n\r\n  handleKeyPressWindow = e => {\r\n    e.preventDefault();\r\n    if (this.state.selection === null) return;\r\n    const data = clone(this.props.data);\r\n    console.log(e);\r\n\r\n    let shouldDelete = e.keyCode === 46 || e.keyCode === 8;\r\n    let isNumpadNumber = e.code.indexOf(\"Numpad\") !== -1\r\n    let isNumber = (e.keyCode >= 48 && e.keyCode <= 57) || isNumpadNumber;\r\n    let valueToInsert = shouldDelete ? null : isNumpadNumber ? e.code.substring(6) : String.fromCharCode(e.keyCode);\r\n\r\n    let shouldUpdateData = false;\r\n    // Delete\r\n    if(shouldDelete)\r\n    {\r\n      this.state.selection.forEach(element => {\r\n        shouldUpdateData = true;\r\n        data[element.row][element.column].cornerNote = valueToInsert\r\n        data[element.row][element.column].centerNote = valueToInsert\r\n        data[element.row][element.column].value = valueToInsert\r\n        data[element.row][element.column].color = valueToInsert\r\n      });\r\n    }\r\n    // Shift + Number\r\n    else if (this.props.inputMode === 1 && e.shiftKey && isNumber) {\r\n      shouldUpdateData = true;\r\n      this.state.selection.forEach(element => {\r\n        data[element.row][element.column].cornerNote = valueToInsert\r\n      });\r\n    }\r\n     // Control + Number\r\n    else if (this.props.inputMode === 1 && e.ctrlKey && isNumber) {\r\n      shouldUpdateData = true;\r\n      this.state.selection.forEach(element => {\r\n        data[element.row][element.column].centerNote = valueToInsert\r\n      });\r\n    }\r\n    // Number\r\n    else if (this.props.inputMode === 1 && isNumber) {\r\n      shouldUpdateData = true;\r\n      this.state.selection.forEach(element => {\r\n        data[element.row][element.column].value = valueToInsert\r\n      });\r\n    }\r\n    // Color\r\n    else if (this.props.inputMode === 2 && isNumber) {\r\n      shouldUpdateData = true;\r\n      this.state.selection.forEach(element => {\r\n        data[element.row][element.column].color = valueToInsert\r\n      });\r\n    }\r\n    \r\n    if(shouldUpdateData){\r\n      this.props.onChange(data);\r\n    }\r\n  };\r\n\r\n  isCellBeingSelected = (row, column) => {\r\n    return this.state.selectionStarted && this.state.selection.some(e => e.row === row && e.column === column);\r\n  };\r\n}\r\n\r\nclass Cell extends React.Component {\r\n  // This optimization gave a 10% performance boost while drag-selecting cells\r\n  shouldComponentUpdate = nextProps =>\r\n    this.props.beingSelected !== nextProps.beingSelected ||\r\n    this.props.selected !== nextProps.selected ||\r\n    this.props.value !== nextProps.value ||\r\n    this.props.centerNote !== nextProps.centerNote ||\r\n    this.props.cornerNote !== nextProps.cornerNote ||\r\n    this.props.color !== nextProps.color;\r\n\r\n  componentDidMount = () => {\r\n    // We need to call addEventListener ourselves so that we can pass\r\n    // {passive: false}\r\n    this.td.addEventListener(\"touchstart\", this.handleTouchStart, {\r\n      passive: false\r\n    });\r\n    this.td.addEventListener(\"touchmove\", this.handleTouchMove, {\r\n      passive: false\r\n    });\r\n  };\r\n\r\n  componentWillUnmount = () => {\r\n    this.td.removeEventListener(\"touchstart\", this.handleTouchStart);\r\n    this.td.removeEventListener(\"touchmove\", this.handleTouchMove);\r\n  };\r\n\r\n  render = () => {\r\n    let {\r\n      className = \"\",\r\n      disabled,\r\n      beingSelected,\r\n      selected,\r\n      onTouchStart,\r\n      onTouchMove,\r\n      value,\r\n      cornerNote,\r\n      centerNote,\r\n      fixedValue,\r\n      color,\r\n      ...props\r\n    } = this.props;\r\n    if (disabled) {\r\n      className += \" cell-disabled\";\r\n    } else {\r\n      className += \" cell-enabled\";\r\n      if (selected) {\r\n        className += \" cell-selected\";\r\n      }\r\n      if (beingSelected) {\r\n        className += \" cell-being-selected\";\r\n      }\r\n      if (color) {\r\n        className += \" color\" + color;\r\n      }\r\n    }\r\n\r\n    let cellValue;\r\n    if(fixedValue && fixedValue.trim())\r\n    {\r\n      cellValue = fixedValue;\r\n      className += \" cell-fixed-value\";\r\n    }\r\n    else\r\n    {\r\n      cellValue = value;\r\n    }\r\n    return (\r\n      <td\r\n        ref={td => (this.td = td)}\r\n        className={className}\r\n        onMouseDown={this.handleTouchStart}\r\n        onMouseMove={this.handleTouchMove}\r\n        {...props}\r\n      >\r\n        {cellValue}\r\n      </td>\r\n    );\r\n  };\r\n\r\n  handleTouchStart = e => {\r\n    if (!this.props.disabled) {\r\n      this.props.onTouchStart(e);\r\n    }\r\n  };\r\n\r\n  handleTouchMove = e => {\r\n    if (!this.props.disabled) {\r\n      this.props.onTouchMove(e);\r\n    }\r\n  };\r\n}\r\n\r\n// Takes a mouse or touch event and returns the corresponding row and cell.\r\n// Example:\r\n// eventToCellLocation(event);\r\n// returns {row: 2, column: 3}\r\nconst eventToCellLocation = e => {\r\n  let target;\r\n  // For touchmove and touchend events, e.target and e.touches[n].target are\r\n  // wrong, so we have to rely on elementFromPoint(). For mouse clicks, we have\r\n  // to use e.target.\r\n  if (e.touches) {\r\n    const touch = e.touches[0];\r\n    target = document.elementFromPoint(touch.clientX, touch.clientY);\r\n  } else {\r\n    target = e.target;\r\n    while (target.tagName !== \"TD\") {\r\n      target = target.parentNode;\r\n    }\r\n  }\r\n  return {\r\n    row: target.parentNode.rowIndex,\r\n    column: target.cellIndex\r\n  };\r\n};\r\n\r\nconst eventIsInputButton = e => {\r\n    return e.target.className === \"input-mode-button\"\r\n}\r\n\r\nclass Board extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    let gridSize = 10;\r\n    let grid = new Array(gridSize).fill((null)).map(() => new Array(gridSize).fill(null).map(() => (\r\n      {\r\n        selected: false,\r\n        value: null,\r\n        cornerNote: null,\r\n        centerNote: null,\r\n        fixedValue: null\r\n      })));\r\n\r\n    this.state = {\r\n      cells: grid\r\n    };\r\n  }\r\n\r\n    render = () =>\r\n      <TableDragSelect\r\n        data={this.state.cells}\r\n        inputMode={this.props.inputMode}\r\n        onChange={cells => this.setState({ cells })}\r\n      >\r\n        <tr>\r\n        <td> </td>\r\n        <td>1 </td>\r\n        <td>1</td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td>10 </td>\r\n        <td>10 </td>\r\n        </tr>\r\n        <tr>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> 7</td>\r\n        <td>1 </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        </tr>\r\n        <tr>\r\n        <td>14 </td>\r\n        <td>3 </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td>9 </td>\r\n        <td>9 </td>\r\n        <td> </td>\r\n        </tr>\r\n        <tr>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td>16 </td>\r\n        <td>16 </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        </tr>\r\n        <tr>\r\n        <td>4 </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td>8 </td>\r\n        <td>8 </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        </tr>\r\n        <tr>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td>5 </td>\r\n        <td>9 </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td>4 </td>\r\n        </tr>\r\n        <tr>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td>4 </td>\r\n        <td>7 </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        </tr>\r\n        <tr>\r\n        <td> </td>\r\n        <td>8 </td>\r\n        <td> 8</td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td>  </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> 5</td>\r\n        <td>5 </td>\r\n        </tr>\r\n        <tr>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td>3 </td>\r\n        <td>1 </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        </tr>\r\n        <tr>\r\n        <td>1 </td>\r\n        <td>1 </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> </td>\r\n        <td> 4</td>\r\n        <td> 4</td>\r\n        <td> </td>\r\n        </tr>\r\n      </TableDragSelect>\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' }\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}